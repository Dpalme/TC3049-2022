var search_data = {"index":{"searchIndex":["asciidoctablegenerator","csvtablegenerator","htmltablegenerator","student","tablegenerator","tablegeneratortest","each()","generate()","generate()","generate()","generate_header_item()","generate_header_item()","generate_header_row()","generate_header_row()","generate_header_row()","generate_header_row()","generate_item()","generate_item()","generate_row()","generate_row()","generate_row()","generate_row()","grade_average()","inspect()","new()","new()","setup()","test_asciidoctablegenerator()","test_csvtablegenerator()","test_htmltablegenerator()"],"longSearchIndex":["asciidoctablegenerator","csvtablegenerator","htmltablegenerator","student","tablegenerator","tablegeneratortest","student#each()","asciidoctablegenerator#generate()","htmltablegenerator#generate()","tablegenerator#generate()","htmltablegenerator#generate_header_item()","tablegenerator#generate_header_item()","asciidoctablegenerator#generate_header_row()","csvtablegenerator#generate_header_row()","htmltablegenerator#generate_header_row()","tablegenerator#generate_header_row()","htmltablegenerator#generate_item()","tablegenerator#generate_item()","asciidoctablegenerator#generate_row()","csvtablegenerator#generate_row()","htmltablegenerator#generate_row()","tablegenerator#generate_row()","student#grade_average()","student#inspect()","student::new()","tablegenerator::new()","tablegeneratortest#setup()","tablegeneratortest#test_asciidoctablegenerator()","tablegeneratortest#test_csvtablegenerator()","tablegeneratortest#test_htmltablegenerator()"],"info":[["AsciiDocTableGenerator","","AsciiDocTableGenerator.html","","<p>A class to generate ASciiDoc tables\n"],["CSVTableGenerator","","CSVTableGenerator.html","","<p>A class to generate CSV tables\n"],["HTMLTableGenerator","","HTMLTableGenerator.html","","<p>A class to generate HTML tables\n"],["Student","","Student.html","","<p>Student class Date: 03-Mar-2022 Authors:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">A01747290</span> <span class=\"ruby-constant\">Diego</span> <span class=\"ruby-constant\">Palmerin</span>\n<span class=\"ruby-constant\">A01748354</span> <span class=\"ruby-constant\">Fernando</span> <span class=\"ruby-constant\">Melgar</span>\n</pre>\n"],["TableGenerator","","TableGenerator.html","","<p>Factory methods for creating tables\n"],["TableGeneratorTest","","TableGeneratorTest.html","","<p>Template class to generate Tables\n"],["each","Student","Student.html#method-i-each","(&block)","<p>Iterator over the properties of Student\n"],["generate","AsciiDocTableGenerator","AsciiDocTableGenerator.html#method-i-generate","()","<p>Override of default generate to add closing |=====\n"],["generate","HTMLTableGenerator","HTMLTableGenerator.html#method-i-generate","()","<p>Override of default generate to add closing |=====\n"],["generate","TableGenerator","TableGenerator.html#method-i-generate","()","<p>Generates the table\n"],["generate_header_item","HTMLTableGenerator","HTMLTableGenerator.html#method-i-generate_header_item","(item)","<p>Override to wrap item as &lt;th&gt;$1&lt;/th&gt;\n"],["generate_header_item","TableGenerator","TableGenerator.html#method-i-generate_header_item","(item)","<p>Default header item\n"],["generate_header_row","AsciiDocTableGenerator","AsciiDocTableGenerator.html#method-i-generate_header_row","()","<p>Override to create necessary lines and join headers\n"],["generate_header_row","CSVTableGenerator","CSVTableGenerator.html#method-i-generate_header_row","()","<p>In CSV the first line defaults as header no special format is needed\n"],["generate_header_row","HTMLTableGenerator","HTMLTableGenerator.html#method-i-generate_header_row","()","<p>Override to wrap items as &lt;tr&gt;$1&lt;/tr&gt;\n"],["generate_header_row","TableGenerator","TableGenerator.html#method-i-generate_header_row","()","<p>Default header row generator\n"],["generate_item","HTMLTableGenerator","HTMLTableGenerator.html#method-i-generate_item","(item)","<p>Override to wrap item as &lt;td&gt;$1&lt;/td&gt;\n"],["generate_item","TableGenerator","TableGenerator.html#method-i-generate_item","(item)","<p>Default item generator\n"],["generate_row","AsciiDocTableGenerator","AsciiDocTableGenerator.html#method-i-generate_row","(row)","<p>Override to join items in |$1|$2|$3 format\n"],["generate_row","CSVTableGenerator","CSVTableGenerator.html#method-i-generate_row","(row)","<p>Override to join items with “,”\n"],["generate_row","HTMLTableGenerator","HTMLTableGenerator.html#method-i-generate_row","(row)","<p>Override to wrap items as &lt;tr&gt;$1&lt;/tr&gt;\n"],["generate_row","TableGenerator","TableGenerator.html#method-i-generate_row","(row)","<p>Default row generator\n"],["grade_average","Student","Student.html#method-i-grade_average","()","<p>Computes the average grade\n"],["inspect","Student","Student.html#method-i-inspect","()","<p>Stringifies the current user\n"],["new","Student","Student.html#method-c-new","(id, name, grades)","<p>Student class constructor\n"],["new","TableGenerator","TableGenerator.html#method-c-new","(header, data)",""],["setup","TableGeneratorTest","TableGeneratorTest.html#method-i-setup","()","<p>create initial values for the tests\n"],["test_AsciiDocTableGenerator","TableGeneratorTest","TableGeneratorTest.html#method-i-test_AsciiDocTableGenerator","()","<p>Tests the implementation of the AsciiDoc Class\n"],["test_CSVTableGenerator","TableGeneratorTest","TableGeneratorTest.html#method-i-test_CSVTableGenerator","()","<p>Tests the implementation of CSV Class\n"],["test_HTMLTableGenerator","TableGeneratorTest","TableGeneratorTest.html#method-i-test_HTMLTableGenerator","()","<p>Tests the implementation of the HTML Class\n"]]}}